package fr.mdsow.gestionstock.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FournisseurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFournisseurAllPropertiesEquals(Fournisseur expected, Fournisseur actual) {
        assertFournisseurAutoGeneratedPropertiesEquals(expected, actual);
        assertFournisseurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFournisseurAllUpdatablePropertiesEquals(Fournisseur expected, Fournisseur actual) {
        assertFournisseurUpdatableFieldsEquals(expected, actual);
        assertFournisseurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFournisseurAutoGeneratedPropertiesEquals(Fournisseur expected, Fournisseur actual) {
        assertThat(expected)
            .as("Verify Fournisseur auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFournisseurUpdatableFieldsEquals(Fournisseur expected, Fournisseur actual) {
        assertThat(expected)
            .as("Verify Fournisseur relevant properties")
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getAdresse()).as("check adresse").isEqualTo(actual.getAdresse()))
            .satisfies(e -> assertThat(e.getContact()).as("check contact").isEqualTo(actual.getContact()))
            .satisfies(e -> assertThat(e.getProfil()).as("check profil").isEqualTo(actual.getProfil()))
            .satisfies(e -> assertThat(e.getProfilContentType()).as("check profil contenty type").isEqualTo(actual.getProfilContentType()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFournisseurUpdatableRelationshipsEquals(Fournisseur expected, Fournisseur actual) {}
}
